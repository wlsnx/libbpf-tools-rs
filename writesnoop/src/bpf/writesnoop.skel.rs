// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::absolute_paths)]
#[allow(clippy::upper_case_acronyms)]
#[allow(clippy::zero_repeat_side_effects)]
#[warn(single_use_lifetimes)]
mod imp {
    #[allow(unused_imports)]
    use super::*;
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;
    use libbpf_rs::AsRawLibbpf as _;
    use libbpf_rs::MapCore as _;
    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("writesnoop_bpf")
            .map("events", false)
            .map("writesno.rodata", true)
            .map("writesno.bss", true)
            .prog("trace_write");
        builder.build()
    }
    pub struct OpenWritesnoopMaps<'obj> {
        pub events: libbpf_rs::OpenMapMut<'obj>,
        pub rodata: libbpf_rs::OpenMapMut<'obj>,
        pub rodata_data: &'obj mut types::rodata,
        pub bss: libbpf_rs::OpenMapMut<'obj>,
        pub bss_data: &'obj mut types::bss,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenWritesnoopMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::OpenObject,
        ) -> libbpf_rs::Result<Self> {
            let mut events = None;
            let mut rodata = None;
            let mut bss = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "events" => events = Some(map),
                    "writesno.rodata" => rodata = Some(map),
                    "writesno.bss" => bss = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                events: events.expect("map `events` not present"),
                rodata: rodata.expect("map `rodata` not present"),
                rodata_data: unsafe {
                    config
                        .map_mmap_ptr(1)
                        .expect("BPF map `rodata` does not have mmap pointer")
                        .cast::<types::rodata>()
                        .as_mut()
                        .expect("BPF map `rodata` mmap pointer is NULL")
                },
                bss: bss.expect("map `bss` not present"),
                bss_data: unsafe {
                    config
                        .map_mmap_ptr(2)
                        .expect("BPF map `bss` does not have mmap pointer")
                        .cast::<types::bss>()
                        .as_mut()
                        .expect("BPF map `bss` mmap pointer is NULL")
                },
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct WritesnoopMaps<'obj> {
        pub events: libbpf_rs::MapMut<'obj>,
        pub rodata: libbpf_rs::MapMut<'obj>,
        pub rodata_data: &'obj types::rodata,
        pub bss: libbpf_rs::MapMut<'obj>,
        pub bss_data: &'obj mut types::bss,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> WritesnoopMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::Object,
        ) -> libbpf_rs::Result<Self> {
            let mut events = None;
            let mut rodata = None;
            let mut bss = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::Object, &'obj mut libbpf_rs::Object>(object)
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "events" => events = Some(map),
                    "writesno.rodata" => rodata = Some(map),
                    "writesno.bss" => bss = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                events: events.expect("map `events` not present"),
                rodata: rodata.expect("map `rodata` not present"),
                rodata_data: unsafe {
                    config
                        .map_mmap_ptr(1)
                        .expect("BPF map `rodata` does not have mmap pointer")
                        .cast::<types::rodata>()
                        .as_ref()
                        .expect("BPF map `rodata` mmap pointer is NULL")
                },
                bss: bss.expect("map `bss` not present"),
                bss_data: unsafe {
                    config
                        .map_mmap_ptr(2)
                        .expect("BPF map `bss` does not have mmap pointer")
                        .cast::<types::bss>()
                        .as_mut()
                        .expect("BPF map `bss` mmap pointer is NULL")
                },
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct OpenWritesnoopProgs<'obj> {
        pub trace_write: libbpf_rs::OpenProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenWritesnoopProgs<'obj> {
        unsafe fn new(object: &mut libbpf_rs::OpenObject) -> libbpf_rs::Result<Self> {
            let mut trace_write = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            for prog in object.progs_mut() {
                let name = prog.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "prog has invalid name",
                    ))
                })?;
                match name {
                    "trace_write" => trace_write = Some(prog),
                    _ => panic!("encountered unexpected prog: `{name}`"),
                }
            }

            let slf = Self {
                trace_write: trace_write.expect("prog `trace_write` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct WritesnoopProgs<'obj> {
        pub trace_write: libbpf_rs::ProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> WritesnoopProgs<'obj> {
        #[allow(unused_variables)]
        fn new(open_progs: OpenWritesnoopProgs<'obj>) -> Self {
            Self {
                trace_write: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs.trace_write.as_libbpf_object().as_mut(),
                    )
                },
                _phantom: std::marker::PhantomData,
            }
        }
    }
    struct OwnedRef<'obj, O> {
        object: Option<&'obj mut std::mem::MaybeUninit<O>>,
    }

    impl<'obj, O> OwnedRef<'obj, O> {
        /// # Safety
        /// The object has to be initialized.
        unsafe fn new(object: &'obj mut std::mem::MaybeUninit<O>) -> Self {
            Self {
                object: Some(object),
            }
        }

        fn as_ref(&self) -> &O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_ref().unwrap().assume_init_ref() }
        }

        fn as_mut(&mut self) -> &mut O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_mut().unwrap().assume_init_mut() }
        }

        fn take(mut self) -> &'obj mut std::mem::MaybeUninit<O> {
            self.object.take().unwrap()
        }
    }

    impl<O> Drop for OwnedRef<'_, O> {
        fn drop(&mut self) {
            if let Some(object) = &mut self.object {
                unsafe { object.assume_init_drop() }
            }
        }
    }

    #[derive(Default)]
    pub struct WritesnoopSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'obj> WritesnoopSkelBuilder {
        fn open_opts_impl(
            self,
            open_opts: *const libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenWritesnoopSkel<'obj>> {
            let skel_config = build_skel_config()?;
            let skel_ptr = skel_config.as_libbpf_object();

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_ptr.as_ptr(), open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            // SAFETY: `skel_ptr` points to a valid object after the
            //         open call.
            let obj_ptr = unsafe { *skel_ptr.as_ref().obj };
            // SANITY: `bpf_object__open_skeleton` should have
            //         allocated the object.
            let obj_ptr = std::ptr::NonNull::new(obj_ptr).unwrap();
            // SAFETY: `obj_ptr` points to an opened object after
            //         skeleton open.
            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(obj_ptr) };
            let _obj = object.write(obj);
            // SAFETY: We just wrote initialized data to `object`.
            let mut obj_ref = unsafe { OwnedRef::new(object) };

            #[allow(unused_mut)]
            let mut skel = OpenWritesnoopSkel {
                maps: unsafe { OpenWritesnoopMaps::new(&skel_config, obj_ref.as_mut())? },
                progs: unsafe { OpenWritesnoopProgs::new(obj_ref.as_mut())? },
                obj: obj_ref,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };

            Ok(skel)
        }
    }

    impl<'obj> SkelBuilder<'obj> for WritesnoopSkelBuilder {
        type Output = OpenWritesnoopSkel<'obj>;
        fn open(
            self,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenWritesnoopSkel<'obj>> {
            self.open_opts_impl(std::ptr::null(), object)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenWritesnoopSkel<'obj>> {
            self.open_opts_impl(&open_opts, object)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    #[derive(Debug, Clone)]
    #[repr(C)]
    pub struct StructOps {}

    impl StructOps {}
    pub mod types {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_1 {
            pub r#type: *mut [i32; 27],
            pub max_entries: *mut [i32; 1048576],
        }
        impl Default for __anon_1 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct trace_event_raw_sys_enter {
            pub ent: trace_entry,
            pub id: i64,
            pub args: [u64; 6],
            pub __data: [i8; 0],
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct trace_entry {
            pub r#type: u16,
            pub flags: u8,
            pub preempt_count: u8,
            pub pid: i32,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct event {
            pub pid: i32,
            pub fd: i32,
            pub count: i32,
            pub data: [u8; 8192],
        }
        impl Default for event {
            fn default() -> Self {
                Self {
                    pid: i32::default(),
                    fd: i32::default(),
                    count: i32::default(),
                    data: [u8::default(); 8192],
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct rodata {
            pub target_pid: i32,
            pub target_comm: [u8; 256],
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct bss {
            pub _e: event,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct maps {
            pub events: __anon_1,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct license {
            pub LICENSE: [i8; 4],
        }
    }
    pub struct OpenWritesnoopSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::OpenObject>,
        pub maps: OpenWritesnoopMaps<'obj>,
        pub progs: OpenWritesnoopProgs<'obj>,
        pub struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
    }

    impl<'obj> OpenSkel<'obj> for OpenWritesnoopSkel<'obj> {
        type Output = WritesnoopSkel<'obj>;
        fn load(self) -> libbpf_rs::Result<WritesnoopSkel<'obj>> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();

            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj_ref = self.obj.take();
            let open_obj = std::mem::replace(obj_ref, std::mem::MaybeUninit::uninit());
            // SAFETY: `open_obj` is guaranteed to be properly
            //         initialized as it came from an `OwnedRef`.
            let obj_ptr = unsafe { open_obj.assume_init().take_ptr() };
            // SAFETY: `obj_ptr` points to a loaded object after
            //         skeleton load.
            let obj = unsafe { libbpf_rs::Object::from_ptr(obj_ptr) };
            // SAFETY: `OpenObject` and `Object` are guaranteed to
            //         have the same memory layout.
            let obj_ref = unsafe {
                std::mem::transmute::<
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::Object>,
                >(obj_ref)
            };
            let _obj = obj_ref.write(obj);
            // SAFETY: We just wrote initialized data to `obj_ref`.
            let mut obj_ref = unsafe { OwnedRef::new(obj_ref) };

            Ok(WritesnoopSkel {
                maps: unsafe { WritesnoopMaps::new(&self.skel_config, obj_ref.as_mut())? },
                progs: WritesnoopProgs::new(self.progs),
                obj: obj_ref,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: WritesnoopLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            self.obj.as_ref()
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            self.obj.as_mut()
        }
    }
    #[derive(Default)]
    pub struct WritesnoopLinks {
        pub trace_write: Option<libbpf_rs::Link>,
    }
    pub struct WritesnoopSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::Object>,
        pub maps: WritesnoopMaps<'obj>,
        pub progs: WritesnoopProgs<'obj>,
        struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
        pub links: WritesnoopLinks,
    }

    unsafe impl Send for WritesnoopSkel<'_> {}
    unsafe impl Sync for WritesnoopSkel<'_> {}

    impl<'obj> Skel<'obj> for WritesnoopSkel<'obj> {
        fn object(&self) -> &libbpf_rs::Object {
            self.obj.as_ref()
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            self.obj.as_mut()
        }
        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = WritesnoopLinks {
                trace_write: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl WritesnoopSkel<'_> {
        pub fn struct_ops_raw(&self) -> *const StructOps {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &StructOps {
            &self.struct_ops
        }
    }
    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 11, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 116, 114, 97, 99, 101, 112, 111, 105, 110, 116, 47, 115, 121, 115, 99, 97, 108, 108,
        115, 47, 115, 121, 115, 95, 101, 110, 116, 101, 114, 95, 119, 114, 105, 116, 101, 0, 46,
        114, 111, 100, 97, 116, 97, 0, 46, 98, 115, 115, 0, 46, 109, 97, 112, 115, 0, 108, 105, 99,
        101, 110, 115, 101, 0, 119, 114, 105, 116, 101, 115, 110, 111, 111, 112, 46, 98, 112, 102,
        46, 99, 0, 116, 114, 97, 99, 101, 95, 119, 114, 105, 116, 101, 0, 116, 97, 114, 103, 101,
        116, 95, 112, 105, 100, 0, 116, 97, 114, 103, 101, 116, 95, 99, 111, 109, 109, 0, 101, 118,
        101, 110, 116, 115, 0, 95, 101, 0, 76, 73, 67, 69, 78, 83, 69, 0, 46, 114, 101, 108, 116,
        114, 97, 99, 101, 112, 111, 105, 110, 116, 47, 115, 121, 115, 99, 97, 108, 108, 115, 47,
        115, 121, 115, 95, 101, 110, 116, 101, 114, 95, 119, 114, 105, 116, 101, 0, 46, 66, 84, 70,
        0, 46, 66, 84, 70, 46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        97, 0, 0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 2, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0,
        17, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 17, 0, 4, 0, 4,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 17, 0, 6, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 139, 0, 0, 0, 17, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 32,
        0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 17, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0,
        0, 191, 22, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 14, 0, 0, 0, 191, 7, 0, 0, 0, 0, 0, 0, 183, 1,
        0, 0, 0, 0, 0, 0, 123, 26, 248, 255, 0, 0, 0, 0, 123, 26, 240, 255, 0, 0, 0, 0, 123, 26,
        232, 255, 0, 0, 0, 0, 123, 26, 224, 255, 0, 0, 0, 0, 123, 26, 216, 255, 0, 0, 0, 0, 123,
        26, 208, 255, 0, 0, 0, 0, 123, 26, 200, 255, 0, 0, 0, 0, 123, 26, 192, 255, 0, 0, 0, 0,
        123, 26, 184, 255, 0, 0, 0, 0, 123, 26, 176, 255, 0, 0, 0, 0, 123, 26, 168, 255, 0, 0, 0,
        0, 123, 26, 160, 255, 0, 0, 0, 0, 123, 26, 152, 255, 0, 0, 0, 0, 123, 26, 144, 255, 0, 0,
        0, 0, 123, 26, 136, 255, 0, 0, 0, 0, 123, 26, 128, 255, 0, 0, 0, 0, 123, 26, 120, 255, 0,
        0, 0, 0, 123, 26, 112, 255, 0, 0, 0, 0, 123, 26, 104, 255, 0, 0, 0, 0, 123, 26, 96, 255, 0,
        0, 0, 0, 123, 26, 88, 255, 0, 0, 0, 0, 123, 26, 80, 255, 0, 0, 0, 0, 123, 26, 72, 255, 0,
        0, 0, 0, 123, 26, 64, 255, 0, 0, 0, 0, 123, 26, 56, 255, 0, 0, 0, 0, 123, 26, 48, 255, 0,
        0, 0, 0, 123, 26, 40, 255, 0, 0, 0, 0, 123, 26, 32, 255, 0, 0, 0, 0, 123, 26, 24, 255, 0,
        0, 0, 0, 123, 26, 16, 255, 0, 0, 0, 0, 123, 26, 8, 255, 0, 0, 0, 0, 123, 26, 0, 255, 0, 0,
        0, 0, 191, 161, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 0, 255, 255, 255, 183, 2, 0, 0, 0, 1, 0, 0,
        133, 0, 0, 0, 16, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 17, 0, 0,
        0, 0, 0, 0, 191, 114, 0, 0, 0, 0, 0, 0, 103, 2, 0, 0, 32, 0, 0, 0, 119, 2, 0, 0, 32, 0, 0,
        0, 29, 33, 7, 0, 0, 0, 0, 0, 191, 161, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 0, 255, 255, 255, 183,
        2, 0, 0, 0, 1, 0, 0, 24, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 182, 0,
        0, 0, 85, 0, 28, 0, 0, 0, 0, 0, 121, 105, 32, 0, 0, 0, 0, 0, 121, 97, 24, 0, 0, 0, 0, 0,
        123, 26, 248, 254, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0,
        0, 12, 32, 0, 0, 183, 3, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 131, 0, 0, 0, 191, 8, 0, 0, 0, 0,
        0, 0, 21, 8, 18, 0, 0, 0, 0, 0, 99, 120, 0, 0, 0, 0, 0, 0, 121, 97, 16, 0, 0, 0, 0, 0, 99,
        24, 4, 0, 0, 0, 0, 0, 103, 9, 0, 0, 32, 0, 0, 0, 199, 9, 0, 0, 32, 0, 0, 0, 183, 1, 0, 0,
        255, 31, 0, 0, 109, 145, 1, 0, 0, 0, 0, 0, 183, 9, 0, 0, 255, 31, 0, 0, 99, 152, 8, 0, 0,
        0, 0, 0, 87, 9, 0, 0, 255, 31, 0, 0, 191, 129, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 12, 0, 0, 0,
        191, 146, 0, 0, 0, 0, 0, 0, 121, 163, 248, 254, 0, 0, 0, 0, 133, 0, 0, 0, 112, 0, 0, 0,
        191, 129, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 132, 0, 0, 0, 183, 0,
        0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 80,
        76, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 144, 1, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 5, 0, 0, 0, 200, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 159, 235, 1,
        0, 24, 0, 0, 0, 0, 0, 0, 0, 56, 3, 0, 0, 56, 3, 0, 0, 242, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
        3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0,
        0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 27, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0,
        0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 2, 0, 0, 4, 16, 0, 0, 0, 25, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 30, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 14, 7, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 2, 10, 0, 0, 0, 49, 0, 0, 0, 4, 0, 0, 4, 64, 0, 0, 0, 75, 0, 0, 0, 11,
        0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 14, 0, 0, 0, 64, 0, 0, 0, 82, 0, 0, 0, 16, 0, 0, 0, 128,
        0, 0, 0, 87, 0, 0, 0, 18, 0, 0, 0, 0, 2, 0, 0, 94, 0, 0, 0, 4, 0, 0, 4, 8, 0, 0, 0, 25, 0,
        0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 112, 0, 0, 0, 13, 0,
        0, 0, 24, 0, 0, 0, 126, 0, 0, 0, 2, 0, 0, 0, 32, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 1, 2, 0,
        0, 0, 16, 0, 0, 0, 145, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0,
        1, 8, 0, 0, 0, 64, 0, 0, 1, 164, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 3, 0, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 178, 0, 0, 0, 0, 0, 0, 1, 1,
        0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 13, 2, 0, 0, 0, 183, 0, 0, 0, 9, 0, 0, 0, 187, 0, 0, 0, 1, 0, 0,
        12, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 2, 0, 0, 0,
        199, 0, 0, 0, 0, 0, 0, 14, 21, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 25, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 9, 26, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 8, 27, 0, 0, 0, 213, 0, 0, 0,
        0, 0, 0, 8, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 24, 0, 0, 0, 4, 0, 0, 0, 0, 1,
        0, 0, 218, 0, 0, 0, 0, 0, 0, 14, 28, 0, 0, 0, 1, 0, 0, 0, 230, 0, 0, 0, 4, 0, 0, 4, 12, 32,
        0, 0, 126, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0, 0, 2, 0, 0, 0, 32, 0, 0, 0, 239, 0,
        0, 0, 2, 0, 0, 0, 64, 0, 0, 0, 245, 0, 0, 0, 31, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 0, 26, 0, 0, 0, 4, 0, 0, 0, 0, 32, 0, 0, 250, 0, 0, 0, 0, 0, 0, 14, 30, 0, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 17, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0,
        253, 0, 0, 0, 0, 0, 0, 14, 33, 0, 0, 0, 1, 0, 0, 0, 179, 3, 0, 0, 2, 0, 0, 15, 4, 1, 0, 0,
        23, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 29, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 187, 3, 0, 0, 1,
        0, 0, 15, 12, 32, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 12, 32, 0, 0, 192, 3, 0, 0, 1, 0, 0, 15,
        16, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 198, 3, 0, 0, 1, 0, 0, 15, 4, 0, 0, 0,
        34, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 105, 110, 116, 0, 95, 95, 65, 82, 82, 65, 89, 95,
        83, 73, 90, 69, 95, 84, 89, 80, 69, 95, 95, 0, 116, 121, 112, 101, 0, 109, 97, 120, 95,
        101, 110, 116, 114, 105, 101, 115, 0, 101, 118, 101, 110, 116, 115, 0, 116, 114, 97, 99,
        101, 95, 101, 118, 101, 110, 116, 95, 114, 97, 119, 95, 115, 121, 115, 95, 101, 110, 116,
        101, 114, 0, 101, 110, 116, 0, 105, 100, 0, 97, 114, 103, 115, 0, 95, 95, 100, 97, 116, 97,
        0, 116, 114, 97, 99, 101, 95, 101, 110, 116, 114, 121, 0, 102, 108, 97, 103, 115, 0, 112,
        114, 101, 101, 109, 112, 116, 95, 99, 111, 117, 110, 116, 0, 112, 105, 100, 0, 117, 110,
        115, 105, 103, 110, 101, 100, 32, 115, 104, 111, 114, 116, 0, 117, 110, 115, 105, 103, 110,
        101, 100, 32, 99, 104, 97, 114, 0, 108, 111, 110, 103, 0, 117, 110, 115, 105, 103, 110,
        101, 100, 32, 108, 111, 110, 103, 0, 99, 104, 97, 114, 0, 99, 116, 120, 0, 116, 114, 97,
        99, 101, 95, 119, 114, 105, 116, 101, 0, 116, 97, 114, 103, 101, 116, 95, 112, 105, 100, 0,
        117, 56, 0, 95, 95, 117, 56, 0, 116, 97, 114, 103, 101, 116, 95, 99, 111, 109, 109, 0, 101,
        118, 101, 110, 116, 0, 102, 100, 0, 99, 111, 117, 110, 116, 0, 100, 97, 116, 97, 0, 95,
        101, 0, 76, 73, 67, 69, 78, 83, 69, 0, 47, 104, 111, 109, 101, 47, 122, 104, 117, 108, 105,
        47, 100, 97, 116, 97, 47, 108, 105, 98, 98, 112, 102, 45, 116, 111, 111, 108, 115, 45, 114,
        115, 47, 119, 114, 105, 116, 101, 115, 110, 111, 111, 112, 47, 115, 114, 99, 47, 98, 112,
        102, 47, 119, 114, 105, 116, 101, 115, 110, 111, 111, 112, 46, 98, 112, 102, 46, 99, 0,
        105, 110, 116, 32, 116, 114, 97, 99, 101, 95, 119, 114, 105, 116, 101, 40, 115, 116, 114,
        117, 99, 116, 32, 116, 114, 97, 99, 101, 95, 101, 118, 101, 110, 116, 95, 114, 97, 119, 95,
        115, 121, 115, 95, 101, 110, 116, 101, 114, 32, 42, 99, 116, 120, 41, 32, 123, 0, 32, 32,
        105, 110, 116, 32, 112, 105, 100, 32, 61, 32, 40, 105, 110, 116, 41, 98, 112, 102, 95, 103,
        101, 116, 95, 99, 117, 114, 114, 101, 110, 116, 95, 112, 105, 100, 95, 116, 103, 105, 100,
        40, 41, 59, 0, 32, 32, 117, 56, 32, 99, 111, 109, 109, 91, 67, 79, 77, 77, 95, 76, 69, 78,
        93, 32, 61, 32, 34, 34, 59, 0, 32, 32, 98, 112, 102, 95, 103, 101, 116, 95, 99, 117, 114,
        114, 101, 110, 116, 95, 99, 111, 109, 109, 40, 38, 99, 111, 109, 109, 44, 32, 67, 79, 77,
        77, 95, 76, 69, 78, 41, 59, 0, 32, 32, 105, 102, 32, 40, 112, 105, 100, 32, 61, 61, 32,
        116, 97, 114, 103, 101, 116, 95, 112, 105, 100, 32, 124, 124, 32, 98, 112, 102, 95, 115,
        116, 114, 110, 99, 109, 112, 40, 99, 111, 109, 109, 44, 32, 67, 79, 77, 77, 95, 76, 69, 78,
        44, 32, 116, 97, 114, 103, 101, 116, 95, 99, 111, 109, 109, 41, 32, 61, 61, 32, 48, 41, 32,
        123, 0, 32, 32, 32, 32, 105, 110, 116, 32, 99, 111, 117, 110, 116, 32, 61, 32, 99, 116,
        120, 45, 62, 97, 114, 103, 115, 91, 50, 93, 59, 0, 32, 32, 32, 32, 118, 111, 105, 100, 32,
        42, 98, 117, 102, 32, 61, 32, 40, 118, 111, 105, 100, 32, 42, 41, 99, 116, 120, 45, 62, 97,
        114, 103, 115, 91, 49, 93, 59, 0, 32, 32, 32, 32, 115, 116, 114, 117, 99, 116, 32, 101,
        118, 101, 110, 116, 32, 42, 101, 32, 61, 32, 98, 112, 102, 95, 114, 105, 110, 103, 98, 117,
        102, 95, 114, 101, 115, 101, 114, 118, 101, 40, 38, 101, 118, 101, 110, 116, 115, 44, 32,
        115, 105, 122, 101, 111, 102, 40, 115, 116, 114, 117, 99, 116, 32, 101, 118, 101, 110, 116,
        41, 44, 32, 48, 41, 59, 0, 32, 32, 32, 32, 105, 102, 32, 40, 33, 101, 41, 32, 123, 0, 32,
        32, 32, 32, 101, 45, 62, 112, 105, 100, 32, 61, 32, 112, 105, 100, 59, 0, 32, 32, 32, 32,
        101, 45, 62, 102, 100, 32, 61, 32, 40, 105, 110, 116, 41, 99, 116, 120, 45, 62, 97, 114,
        103, 115, 91, 48, 93, 59, 0, 32, 32, 32, 32, 105, 102, 32, 40, 99, 111, 117, 110, 116, 32,
        62, 61, 32, 68, 65, 84, 65, 95, 76, 69, 78, 41, 32, 123, 0, 32, 32, 32, 32, 101, 45, 62,
        99, 111, 117, 110, 116, 32, 61, 32, 99, 111, 117, 110, 116, 59, 0, 32, 32, 32, 32, 98, 112,
        102, 95, 112, 114, 111, 98, 101, 95, 114, 101, 97, 100, 95, 117, 115, 101, 114, 40, 101,
        45, 62, 100, 97, 116, 97, 44, 32, 99, 111, 117, 110, 116, 32, 38, 32, 40, 68, 65, 84, 65,
        95, 76, 69, 78, 32, 45, 32, 49, 41, 44, 32, 98, 117, 102, 41, 59, 0, 32, 32, 32, 32, 98,
        112, 102, 95, 114, 105, 110, 103, 98, 117, 102, 95, 115, 117, 98, 109, 105, 116, 40, 101,
        44, 32, 48, 41, 59, 0, 125, 0, 48, 58, 50, 58, 50, 0, 48, 58, 50, 58, 49, 0, 48, 58, 50,
        58, 48, 0, 46, 114, 111, 100, 97, 116, 97, 0, 46, 98, 115, 115, 0, 46, 109, 97, 112, 115,
        0, 108, 105, 99, 101, 110, 115, 101, 0, 116, 114, 97, 99, 101, 112, 111, 105, 110, 116, 47,
        115, 121, 115, 99, 97, 108, 108, 115, 47, 115, 121, 115, 95, 101, 110, 116, 101, 114, 95,
        119, 114, 105, 116, 101, 0, 0, 0, 0, 0, 0, 0, 159, 235, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 20,
        0, 0, 0, 20, 0, 0, 0, 140, 1, 0, 0, 160, 1, 0, 0, 60, 0, 0, 0, 8, 0, 0, 0, 206, 3, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 16, 0, 0, 0, 206, 3, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 5, 1,
        0, 0, 74, 1, 0, 0, 0, 108, 0, 0, 8, 0, 0, 0, 5, 1, 0, 0, 131, 1, 0, 0, 18, 112, 0, 0, 32,
        0, 0, 0, 5, 1, 0, 0, 176, 1, 0, 0, 6, 116, 0, 0, 48, 1, 0, 0, 5, 1, 0, 0, 202, 1, 0, 0, 3,
        120, 0, 0, 64, 1, 0, 0, 5, 1, 0, 0, 243, 1, 0, 0, 14, 124, 0, 0, 88, 1, 0, 0, 5, 1, 0, 0,
        131, 1, 0, 0, 13, 112, 0, 0, 112, 1, 0, 0, 5, 1, 0, 0, 243, 1, 0, 0, 25, 124, 0, 0, 136, 1,
        0, 0, 5, 1, 0, 0, 243, 1, 0, 0, 28, 124, 0, 0, 168, 1, 0, 0, 5, 1, 0, 0, 243, 1, 0, 0, 7,
        124, 0, 0, 176, 1, 0, 0, 5, 1, 0, 0, 63, 2, 0, 0, 17, 132, 0, 0, 184, 1, 0, 0, 5, 1, 0, 0,
        93, 2, 0, 0, 25, 128, 0, 0, 192, 1, 0, 0, 5, 1, 0, 0, 131, 2, 0, 0, 23, 148, 0, 0, 248, 1,
        0, 0, 5, 1, 0, 0, 208, 2, 0, 0, 9, 152, 0, 0, 0, 2, 0, 0, 5, 1, 0, 0, 222, 2, 0, 0, 12,
        164, 0, 0, 8, 2, 0, 0, 5, 1, 0, 0, 240, 2, 0, 0, 18, 168, 0, 0, 16, 2, 0, 0, 5, 1, 0, 0,
        240, 2, 0, 0, 11, 168, 0, 0, 24, 2, 0, 0, 5, 1, 0, 0, 63, 2, 0, 0, 17, 132, 0, 0, 48, 2, 0,
        0, 5, 1, 0, 0, 15, 3, 0, 0, 9, 136, 0, 0, 64, 2, 0, 0, 5, 1, 0, 0, 44, 3, 0, 0, 14, 172, 0,
        0, 72, 2, 0, 0, 5, 1, 0, 0, 66, 3, 0, 0, 40, 176, 0, 0, 80, 2, 0, 0, 5, 1, 0, 0, 66, 3, 0,
        0, 28, 176, 0, 0, 96, 2, 0, 0, 5, 1, 0, 0, 66, 3, 0, 0, 5, 176, 0, 0, 120, 2, 0, 0, 5, 1,
        0, 0, 129, 3, 0, 0, 5, 180, 0, 0, 144, 2, 0, 0, 5, 1, 0, 0, 159, 3, 0, 0, 1, 192, 0, 0, 16,
        0, 0, 0, 206, 3, 0, 0, 3, 0, 0, 0, 176, 1, 0, 0, 10, 0, 0, 0, 161, 3, 0, 0, 0, 0, 0, 0,
        184, 1, 0, 0, 10, 0, 0, 0, 167, 3, 0, 0, 0, 0, 0, 0, 8, 2, 0, 0, 10, 0, 0, 0, 173, 3, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 0, 0, 0, 0, 0, 0, 216, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0,
        6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 1, 0, 0, 0, 0, 0, 0, 160, 2, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
        0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 4, 0, 0, 0, 0, 0, 0, 4,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 61, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 5, 0, 0,
        0, 0, 0, 0, 12, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        144, 5, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 160, 5, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 5, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
        0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 190, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 5, 0, 0, 0, 0, 0, 0, 66, 7, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 13, 0, 0, 0, 0, 0, 0,
        252, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0,
    ];
}
