// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::absolute_paths)]
#[allow(clippy::upper_case_acronyms)]
#[allow(clippy::zero_repeat_side_effects)]
#[warn(single_use_lifetimes)]
mod imp {
    #[allow(unused_imports)]
    use super::*;
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;
    use libbpf_rs::AsRawLibbpf as _;
    use libbpf_rs::MapCore as _;
    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("bashreadline_bpf")
            .map("events", false)
            .map("bashread.bss", true)
            .map(".rodata.str1.1", false)
            .prog("printret");
        builder.build()
    }
    pub struct OpenBashreadlineMaps<'obj> {
        pub events: libbpf_rs::OpenMapMut<'obj>,
        pub bss: libbpf_rs::OpenMapMut<'obj>,
        pub bss_data: &'obj mut types::bss,
        pub rodata_str1_1: libbpf_rs::OpenMapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenBashreadlineMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::OpenObject,
        ) -> libbpf_rs::Result<Self> {
            let mut events = None;
            let mut bss = None;
            let mut rodata_str1_1 = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "events" => events = Some(map),
                    "bashread.bss" => bss = Some(map),
                    ".rodata.str1.1" => rodata_str1_1 = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                events: events.expect("map `events` not present"),
                bss: bss.expect("map `bss` not present"),
                bss_data: unsafe {
                    config
                        .map_mmap_ptr(1)
                        .expect("BPF map `bss` does not have mmap pointer")
                        .cast::<types::bss>()
                        .as_mut()
                        .expect("BPF map `bss` mmap pointer is NULL")
                },
                rodata_str1_1: rodata_str1_1.expect("map `rodata_str1_1` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct BashreadlineMaps<'obj> {
        pub events: libbpf_rs::MapMut<'obj>,
        pub bss: libbpf_rs::MapMut<'obj>,
        pub bss_data: &'obj mut types::bss,
        pub rodata_str1_1: libbpf_rs::MapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> BashreadlineMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::Object,
        ) -> libbpf_rs::Result<Self> {
            let mut events = None;
            let mut bss = None;
            let mut rodata_str1_1 = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::Object, &'obj mut libbpf_rs::Object>(object)
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "events" => events = Some(map),
                    "bashread.bss" => bss = Some(map),
                    ".rodata.str1.1" => rodata_str1_1 = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                events: events.expect("map `events` not present"),
                bss: bss.expect("map `bss` not present"),
                bss_data: unsafe {
                    config
                        .map_mmap_ptr(1)
                        .expect("BPF map `bss` does not have mmap pointer")
                        .cast::<types::bss>()
                        .as_mut()
                        .expect("BPF map `bss` mmap pointer is NULL")
                },
                rodata_str1_1: rodata_str1_1.expect("map `rodata_str1_1` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct OpenBashreadlineProgs<'obj> {
        pub printret: libbpf_rs::OpenProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenBashreadlineProgs<'obj> {
        unsafe fn new(object: &mut libbpf_rs::OpenObject) -> libbpf_rs::Result<Self> {
            let mut printret = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            for prog in object.progs_mut() {
                let name = prog.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "prog has invalid name",
                    ))
                })?;
                match name {
                    "printret" => printret = Some(prog),
                    _ => panic!("encountered unexpected prog: `{name}`"),
                }
            }

            let slf = Self {
                printret: printret.expect("prog `printret` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct BashreadlineProgs<'obj> {
        pub printret: libbpf_rs::ProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> BashreadlineProgs<'obj> {
        #[allow(unused_variables)]
        fn new(open_progs: OpenBashreadlineProgs<'obj>) -> Self {
            Self {
                printret: unsafe {
                    libbpf_rs::ProgramMut::new_mut(open_progs.printret.as_libbpf_object().as_mut())
                },
                _phantom: std::marker::PhantomData,
            }
        }
    }
    struct OwnedRef<'obj, O> {
        object: Option<&'obj mut std::mem::MaybeUninit<O>>,
    }

    impl<'obj, O> OwnedRef<'obj, O> {
        /// # Safety
        /// The object has to be initialized.
        unsafe fn new(object: &'obj mut std::mem::MaybeUninit<O>) -> Self {
            Self {
                object: Some(object),
            }
        }

        fn as_ref(&self) -> &O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_ref().unwrap().assume_init_ref() }
        }

        fn as_mut(&mut self) -> &mut O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_mut().unwrap().assume_init_mut() }
        }

        fn take(mut self) -> &'obj mut std::mem::MaybeUninit<O> {
            self.object.take().unwrap()
        }
    }

    impl<O> Drop for OwnedRef<'_, O> {
        fn drop(&mut self) {
            if let Some(object) = &mut self.object {
                unsafe { object.assume_init_drop() }
            }
        }
    }

    #[derive(Default)]
    pub struct BashreadlineSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'obj> BashreadlineSkelBuilder {
        fn open_opts_impl(
            self,
            open_opts: *const libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenBashreadlineSkel<'obj>> {
            let skel_config = build_skel_config()?;
            let skel_ptr = skel_config.as_libbpf_object();

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_ptr.as_ptr(), open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            // SAFETY: `skel_ptr` points to a valid object after the
            //         open call.
            let obj_ptr = unsafe { *skel_ptr.as_ref().obj };
            // SANITY: `bpf_object__open_skeleton` should have
            //         allocated the object.
            let obj_ptr = std::ptr::NonNull::new(obj_ptr).unwrap();
            // SAFETY: `obj_ptr` points to an opened object after
            //         skeleton open.
            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(obj_ptr) };
            let _obj = object.write(obj);
            // SAFETY: We just wrote initialized data to `object`.
            let mut obj_ref = unsafe { OwnedRef::new(object) };

            #[allow(unused_mut)]
            let mut skel = OpenBashreadlineSkel {
                maps: unsafe { OpenBashreadlineMaps::new(&skel_config, obj_ref.as_mut())? },
                progs: unsafe { OpenBashreadlineProgs::new(obj_ref.as_mut())? },
                obj: obj_ref,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };

            Ok(skel)
        }
    }

    impl<'obj> SkelBuilder<'obj> for BashreadlineSkelBuilder {
        type Output = OpenBashreadlineSkel<'obj>;
        fn open(
            self,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenBashreadlineSkel<'obj>> {
            self.open_opts_impl(std::ptr::null(), object)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenBashreadlineSkel<'obj>> {
            self.open_opts_impl(&open_opts, object)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    #[derive(Debug, Clone)]
    #[repr(C)]
    pub struct StructOps {}

    impl StructOps {}
    pub mod types {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_1 {
            pub r#type: *mut [i32; 4],
            pub key_size: *mut [i32; 4],
            pub value_size: *mut [i32; 4],
        }
        impl Default for __anon_1 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    key_size: std::ptr::null_mut(),
                    value_size: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct pt_regs {
            pub r15: u64,
            pub r14: u64,
            pub r13: u64,
            pub r12: u64,
            pub bp: u64,
            pub bx: u64,
            pub r11: u64,
            pub r10: u64,
            pub r9: u64,
            pub r8: u64,
            pub ax: u64,
            pub cx: u64,
            pub dx: u64,
            pub si: u64,
            pub di: u64,
            pub orig_ax: u64,
            pub ip: u64,
            pub cs: u64,
            pub flags: u64,
            pub sp: u64,
            pub ss: u64,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct str_t {
            pub pid: u32,
            pub str: [u8; 80],
        }
        impl Default for str_t {
            fn default() -> Self {
                Self {
                    pid: u32::default(),
                    str: [u8::default(); 80],
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct bss {
            pub _data: str_t,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct license {
            pub LICENSE: [i8; 4],
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct maps {
            pub events: __anon_1,
        }
    }
    pub struct OpenBashreadlineSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::OpenObject>,
        pub maps: OpenBashreadlineMaps<'obj>,
        pub progs: OpenBashreadlineProgs<'obj>,
        pub struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
    }

    impl<'obj> OpenSkel<'obj> for OpenBashreadlineSkel<'obj> {
        type Output = BashreadlineSkel<'obj>;
        fn load(self) -> libbpf_rs::Result<BashreadlineSkel<'obj>> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();

            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj_ref = self.obj.take();
            let open_obj = std::mem::replace(obj_ref, std::mem::MaybeUninit::uninit());
            // SAFETY: `open_obj` is guaranteed to be properly
            //         initialized as it came from an `OwnedRef`.
            let obj_ptr = unsafe { open_obj.assume_init().take_ptr() };
            // SAFETY: `obj_ptr` points to a loaded object after
            //         skeleton load.
            let obj = unsafe { libbpf_rs::Object::from_ptr(obj_ptr) };
            // SAFETY: `OpenObject` and `Object` are guaranteed to
            //         have the same memory layout.
            let obj_ref = unsafe {
                std::mem::transmute::<
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::Object>,
                >(obj_ref)
            };
            let _obj = obj_ref.write(obj);
            // SAFETY: We just wrote initialized data to `obj_ref`.
            let mut obj_ref = unsafe { OwnedRef::new(obj_ref) };

            Ok(BashreadlineSkel {
                maps: unsafe { BashreadlineMaps::new(&self.skel_config, obj_ref.as_mut())? },
                progs: BashreadlineProgs::new(self.progs),
                obj: obj_ref,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: BashreadlineLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            self.obj.as_ref()
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            self.obj.as_mut()
        }
    }
    #[derive(Default)]
    pub struct BashreadlineLinks {
        pub printret: Option<libbpf_rs::Link>,
    }
    pub struct BashreadlineSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::Object>,
        pub maps: BashreadlineMaps<'obj>,
        pub progs: BashreadlineProgs<'obj>,
        struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
        pub links: BashreadlineLinks,
    }

    unsafe impl Send for BashreadlineSkel<'_> {}
    unsafe impl Sync for BashreadlineSkel<'_> {}

    impl<'obj> Skel<'obj> for BashreadlineSkel<'obj> {
        fn object(&self) -> &libbpf_rs::Object {
            self.obj.as_ref()
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            self.obj.as_mut()
        }
        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = BashreadlineLinks {
                printret: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl BashreadlineSkel<'_> {
        pub fn struct_ops_raw(&self) -> *const StructOps {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &StructOps {
            &self.struct_ops
        }
    }
    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 11, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 117, 114, 101, 116, 112, 114, 111, 98, 101, 47, 114, 101, 97, 100, 108, 105, 110,
        101, 0, 46, 98, 115, 115, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109, 97, 112, 115, 0,
        46, 114, 111, 100, 97, 116, 97, 46, 115, 116, 114, 49, 46, 49, 0, 98, 97, 115, 104, 114,
        101, 97, 100, 108, 105, 110, 101, 46, 98, 112, 102, 46, 99, 0, 112, 114, 105, 110, 116,
        114, 101, 116, 0, 101, 118, 101, 110, 116, 115, 0, 95, 100, 97, 116, 97, 0, 76, 73, 67, 69,
        78, 83, 69, 0, 46, 114, 101, 108, 117, 114, 101, 116, 112, 114, 111, 98, 101, 47, 114, 101,
        97, 100, 108, 105, 110, 101, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70, 46, 101, 120, 116, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0,
        0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0,
        0, 0, 0, 0, 98, 0, 0, 0, 17, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 105,
        0, 0, 0, 17, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 17, 0,
        5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 191, 22, 0, 0, 0, 0, 0, 0, 121, 103,
        80, 0, 0, 0, 0, 0, 21, 7, 28, 0, 0, 0, 0, 0, 191, 168, 0, 0, 0, 0, 0, 0, 7, 8, 0, 0, 156,
        255, 255, 255, 191, 129, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 16, 0, 0, 0, 133, 0, 0, 0, 16, 0,
        0, 0, 191, 129, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 16, 0, 0, 0, 24, 3, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 182, 0, 0, 0, 85, 0, 17, 0, 0, 0, 0, 0, 133, 0, 0, 0, 14,
        0, 0, 0, 119, 0, 0, 0, 32, 0, 0, 0, 99, 10, 172, 255, 0, 0, 0, 0, 191, 161, 0, 0, 0, 0, 0,
        0, 7, 1, 0, 0, 176, 255, 255, 255, 183, 2, 0, 0, 80, 0, 0, 0, 191, 115, 0, 0, 0, 0, 0, 0,
        133, 0, 0, 0, 114, 0, 0, 0, 191, 164, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 172, 255, 255, 255,
        191, 97, 0, 0, 0, 0, 0, 0, 24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 3, 0, 0,
        255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 183, 5, 0, 0, 84, 0, 0, 0, 133, 0, 0, 0, 25, 0,
        0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 71, 80, 76, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 97, 115, 104, 0, 0,
        0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 5, 0, 0, 0, 159, 235, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 240, 2, 0, 0, 240, 2, 0, 0, 204, 2,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 0, 0,
        0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 24, 0, 0, 0, 25, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 30, 0, 0, 0, 1, 0, 0, 0, 64, 0, 0, 0, 39, 0, 0, 0, 1, 0, 0, 0, 128, 0, 0, 0,
        50, 0, 0, 0, 0, 0, 0, 14, 5, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 57,
        0, 0, 0, 21, 0, 0, 4, 168, 0, 0, 0, 65, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 9, 0,
        0, 0, 64, 0, 0, 0, 73, 0, 0, 0, 9, 0, 0, 0, 128, 0, 0, 0, 77, 0, 0, 0, 9, 0, 0, 0, 192, 0,
        0, 0, 81, 0, 0, 0, 9, 0, 0, 0, 0, 1, 0, 0, 84, 0, 0, 0, 9, 0, 0, 0, 64, 1, 0, 0, 87, 0, 0,
        0, 9, 0, 0, 0, 128, 1, 0, 0, 91, 0, 0, 0, 9, 0, 0, 0, 192, 1, 0, 0, 95, 0, 0, 0, 9, 0, 0,
        0, 0, 2, 0, 0, 98, 0, 0, 0, 9, 0, 0, 0, 64, 2, 0, 0, 101, 0, 0, 0, 9, 0, 0, 0, 128, 2, 0,
        0, 104, 0, 0, 0, 9, 0, 0, 0, 192, 2, 0, 0, 107, 0, 0, 0, 9, 0, 0, 0, 0, 3, 0, 0, 110, 0, 0,
        0, 9, 0, 0, 0, 64, 3, 0, 0, 113, 0, 0, 0, 9, 0, 0, 0, 128, 3, 0, 0, 116, 0, 0, 0, 9, 0, 0,
        0, 192, 3, 0, 0, 124, 0, 0, 0, 9, 0, 0, 0, 0, 4, 0, 0, 127, 0, 0, 0, 9, 0, 0, 0, 64, 4, 0,
        0, 130, 0, 0, 0, 9, 0, 0, 0, 128, 4, 0, 0, 136, 0, 0, 0, 9, 0, 0, 0, 192, 4, 0, 0, 139, 0,
        0, 0, 9, 0, 0, 0, 0, 5, 0, 0, 142, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 13, 2, 0, 0, 0, 156, 0, 0, 0, 7, 0, 0, 0, 160, 0, 0, 0, 1, 0, 0, 12, 10, 0, 0,
        0, 169, 0, 0, 0, 2, 0, 0, 4, 84, 0, 0, 0, 175, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 179, 0, 0,
        0, 18, 0, 0, 0, 32, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 8, 14, 0, 0, 0, 189, 0, 0, 0, 0, 0, 0,
        1, 4, 0, 0, 0, 32, 0, 0, 0, 202, 0, 0, 0, 0, 0, 0, 8, 16, 0, 0, 0, 205, 0, 0, 0, 0, 0, 0,
        8, 17, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
        0, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 80, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0, 14, 12, 0, 0, 0,
        1, 0, 0, 0, 230, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0,
        0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 235, 0, 0, 0, 0, 0, 0, 14, 21, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 20, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 166, 2, 0, 0,
        1, 0, 0, 15, 84, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 171, 2, 0, 0, 1, 0, 0, 15,
        4, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 179, 2, 0, 0, 1, 0, 0, 15, 24, 0, 0, 0, 6,
        0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 105, 110, 116, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83,
        73, 90, 69, 95, 84, 89, 80, 69, 95, 95, 0, 116, 121, 112, 101, 0, 107, 101, 121, 95, 115,
        105, 122, 101, 0, 118, 97, 108, 117, 101, 95, 115, 105, 122, 101, 0, 101, 118, 101, 110,
        116, 115, 0, 112, 116, 95, 114, 101, 103, 115, 0, 114, 49, 53, 0, 114, 49, 52, 0, 114, 49,
        51, 0, 114, 49, 50, 0, 98, 112, 0, 98, 120, 0, 114, 49, 49, 0, 114, 49, 48, 0, 114, 57, 0,
        114, 56, 0, 97, 120, 0, 99, 120, 0, 100, 120, 0, 115, 105, 0, 100, 105, 0, 111, 114, 105,
        103, 95, 97, 120, 0, 105, 112, 0, 99, 115, 0, 102, 108, 97, 103, 115, 0, 115, 112, 0, 115,
        115, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 108, 111, 110, 103, 0, 99, 116, 120, 0,
        112, 114, 105, 110, 116, 114, 101, 116, 0, 115, 116, 114, 95, 116, 0, 112, 105, 100, 0,
        115, 116, 114, 0, 95, 95, 117, 51, 50, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 105,
        110, 116, 0, 117, 56, 0, 95, 95, 117, 56, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32,
        99, 104, 97, 114, 0, 95, 100, 97, 116, 97, 0, 99, 104, 97, 114, 0, 76, 73, 67, 69, 78, 83,
        69, 0, 47, 104, 111, 109, 101, 47, 122, 104, 117, 108, 105, 47, 100, 97, 116, 97, 47, 108,
        105, 98, 98, 112, 102, 45, 116, 111, 111, 108, 115, 45, 114, 115, 47, 98, 97, 115, 104,
        114, 101, 97, 100, 108, 105, 110, 101, 47, 115, 114, 99, 47, 98, 112, 102, 47, 98, 97, 115,
        104, 114, 101, 97, 100, 108, 105, 110, 101, 46, 98, 112, 102, 46, 99, 0, 105, 110, 116, 32,
        66, 80, 70, 95, 75, 82, 69, 84, 80, 82, 79, 66, 69, 40, 112, 114, 105, 110, 116, 114, 101,
        116, 44, 32, 99, 111, 110, 115, 116, 32, 118, 111, 105, 100, 32, 42, 114, 101, 116, 41, 32,
        123, 0, 32, 32, 105, 102, 32, 40, 33, 114, 101, 116, 41, 0, 32, 32, 98, 112, 102, 95, 103,
        101, 116, 95, 99, 117, 114, 114, 101, 110, 116, 95, 99, 111, 109, 109, 40, 38, 99, 111,
        109, 109, 44, 32, 115, 105, 122, 101, 111, 102, 40, 99, 111, 109, 109, 41, 41, 59, 0, 32,
        32, 105, 102, 32, 40, 98, 112, 102, 95, 115, 116, 114, 110, 99, 109, 112, 40, 99, 111, 109,
        109, 44, 32, 84, 65, 83, 75, 95, 67, 79, 77, 77, 95, 76, 69, 78, 44, 32, 34, 98, 97, 115,
        104, 34, 41, 32, 33, 61, 32, 48, 41, 0, 32, 32, 112, 105, 100, 32, 61, 32, 98, 112, 102,
        95, 103, 101, 116, 95, 99, 117, 114, 114, 101, 110, 116, 95, 112, 105, 100, 95, 116, 103,
        105, 100, 40, 41, 32, 62, 62, 32, 51, 50, 59, 0, 32, 32, 100, 97, 116, 97, 46, 112, 105,
        100, 32, 61, 32, 112, 105, 100, 59, 0, 32, 32, 98, 112, 102, 95, 112, 114, 111, 98, 101,
        95, 114, 101, 97, 100, 95, 117, 115, 101, 114, 95, 115, 116, 114, 40, 38, 100, 97, 116, 97,
        46, 115, 116, 114, 44, 32, 115, 105, 122, 101, 111, 102, 40, 100, 97, 116, 97, 46, 115,
        116, 114, 41, 44, 32, 114, 101, 116, 41, 59, 0, 32, 32, 98, 112, 102, 95, 112, 101, 114,
        102, 95, 101, 118, 101, 110, 116, 95, 111, 117, 116, 112, 117, 116, 40, 99, 116, 120, 44,
        32, 38, 101, 118, 101, 110, 116, 115, 44, 32, 66, 80, 70, 95, 70, 95, 67, 85, 82, 82, 69,
        78, 84, 95, 67, 80, 85, 44, 32, 38, 100, 97, 116, 97, 44, 32, 115, 105, 122, 101, 111, 102,
        40, 100, 97, 116, 97, 41, 41, 59, 0, 48, 58, 49, 48, 0, 46, 98, 115, 115, 0, 108, 105, 99,
        101, 110, 115, 101, 0, 46, 109, 97, 112, 115, 0, 117, 114, 101, 116, 112, 114, 111, 98,
        101, 47, 114, 101, 97, 100, 108, 105, 110, 101, 0, 0, 0, 0, 0, 159, 235, 1, 0, 32, 0, 0, 0,
        0, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 220, 0, 0, 0, 240, 0, 0, 0, 28, 0, 0, 0, 8, 0, 0, 0,
        185, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 16, 0, 0, 0, 185, 2, 0, 0, 13, 0, 0, 0,
        0, 0, 0, 0, 243, 0, 0, 0, 60, 1, 0, 0, 0, 80, 0, 0, 8, 0, 0, 0, 243, 0, 0, 0, 60, 1, 0, 0,
        5, 80, 0, 0, 16, 0, 0, 0, 243, 0, 0, 0, 107, 1, 0, 0, 7, 100, 0, 0, 40, 0, 0, 0, 243, 0, 0,
        0, 119, 1, 0, 0, 3, 112, 0, 0, 64, 0, 0, 0, 243, 0, 0, 0, 164, 1, 0, 0, 7, 116, 0, 0, 104,
        0, 0, 0, 243, 0, 0, 0, 164, 1, 0, 0, 7, 116, 0, 0, 112, 0, 0, 0, 243, 0, 0, 0, 217, 1, 0,
        0, 9, 128, 0, 0, 120, 0, 0, 0, 243, 0, 0, 0, 217, 1, 0, 0, 36, 128, 0, 0, 128, 0, 0, 0,
        243, 0, 0, 0, 3, 2, 0, 0, 12, 132, 0, 0, 136, 0, 0, 0, 243, 0, 0, 0, 21, 2, 0, 0, 33, 136,
        0, 0, 152, 0, 0, 0, 243, 0, 0, 0, 21, 2, 0, 0, 3, 136, 0, 0, 192, 0, 0, 0, 243, 0, 0, 0,
        82, 2, 0, 0, 3, 144, 0, 0, 248, 0, 0, 0, 243, 0, 0, 0, 60, 1, 0, 0, 5, 80, 0, 0, 16, 0, 0,
        0, 185, 2, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 161, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
        0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 224, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0,
        0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 160, 1, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 2, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 1, 0, 0, 0,
        3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
        1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 2, 0, 0, 0, 0, 0, 0, 24,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 55, 0, 0, 0, 1, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 2, 0, 0,
        0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 208, 2, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0,
        0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 240, 2, 0, 0, 0, 0, 0, 0, 212, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 8, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
